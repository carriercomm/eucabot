package com.eucalyptus.eucabot.webcam;

import com.ochafik.lang.jnaerator.runtime.LibraryExtractor;
import com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import java.nio.IntBuffer;

/**
 * JNA Wrapper for library <b>com.eucalyptus.eucabot.webcam</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class WebcamLibrary implements Library {
	public static final String JNA_LIBRARY_NAME = LibraryExtractor.getLibraryPath("libwebcam", true, com.eucalyptus.eucabot.webcam.WebcamLibrary.class);
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(com.eucalyptus.eucabot.webcam.WebcamLibrary.JNA_LIBRARY_NAME, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	static {
		Native.register(com.eucalyptus.eucabot.webcam.WebcamLibrary.JNA_LIBRARY_NAME);
	}
	/**
	 * Return values for libwebcam functions.<br>
	 * <i>native declaration : line 49</i><br>
	 * enum values
	 */
	public static interface _CResults {
		/**
		 * < Success<br>
		 * <i>native declaration : line 50</i>
		 */
		public static final int C_SUCCESS = 0;
		/**
		 * < The function is not implemented<br>
		 * <i>native declaration : line 51</i>
		 */
		public static final int C_NOT_IMPLEMENTED = 1;
		/**
		 * < Error during initialization or library not initialized<br>
		 * <i>native declaration : line 52</i>
		 */
		public static final int C_INIT_ERROR = 2;
		/**
		 * < Invalid argument<br>
		 * <i>native declaration : line 53</i>
		 */
		public static final int C_INVALID_ARG = 3;
		/**
		 * < Invalid handle<br>
		 * <i>native declaration : line 54</i>
		 */
		public static final int C_INVALID_HANDLE = 4;
		/**
		 * < Invalid device or device cannot be opened<br>
		 * <i>native declaration : line 55</i>
		 */
		public static final int C_INVALID_DEVICE = 5;
		/**
		 * < The device to which the handle points no longer exists<br>
		 * <i>native declaration : line 56</i>
		 */
		public static final int C_NOT_EXIST = 6;
		/**
		 * < Object not found<br>
		 * <i>native declaration : line 57</i>
		 */
		public static final int C_NOT_FOUND = 7;
		/**
		 * < Buffer too small<br>
		 * <i>native declaration : line 58</i>
		 */
		public static final int C_BUFFER_TOO_SMALL = 8;
		/**
		 * < Error during data synchronization<br>
		 * <i>native declaration : line 59</i>
		 */
		public static final int C_SYNC_ERROR = 9;
		/**
		 * < Out of memory<br>
		 * <i>native declaration : line 60</i>
		 */
		public static final int C_NO_MEMORY = 10;
		/**
		 * < Out of handles<br>
		 * <i>native declaration : line 61</i>
		 */
		public static final int C_NO_HANDLES = 11;
		/**
		 * < A Video4Linux2 API call returned an unexpected error<br>
		 * <i>native declaration : line 62</i>
		 */
		public static final int C_V4L2_ERROR = 12;
		/**
		 * < A sysfs file access returned an error<br>
		 * <i>native declaration : line 63</i>
		 */
		public static final int C_SYSFS_ERROR = 13;
		/**
		 * < A control could not be parsed<br>
		 * <i>native declaration : line 64</i>
		 */
		public static final int C_PARSE_ERROR = 14;
		/**
		 * < Writing not possible (e.g. read-only control)<br>
		 * <i>native declaration : line 65</i>
		 */
		public static final int C_CANNOT_WRITE = 15;
		/**
		 * < Reading not possible (e.g. write-only control)<br>
		 * <i>native declaration : line 66</i>
		 */
		public static final int C_CANNOT_READ = 16;
	};
	/// enum values
	public static interface CControlId {
		/**
		 * UVC: Basic image control<br>
		 * UVC: Basic image control<br>
		 * < Image brightness<br>
		 * <i>native declaration : line 77</i>
		 */
		public static final int CC_BRIGHTNESS = 1;
		/**
		 * < Image contrast<br>
		 * <i>native declaration : line 78</i>
		 */
		public static final int CC_CONTRAST = 2;
		/**
		 * < Gain control<br>
		 * <i>native declaration : line 79</i>
		 */
		public static final int CC_GAIN = 3;
		/**
		 * < Image color saturation<br>
		 * <i>native declaration : line 80</i>
		 */
		public static final int CC_SATURATION = 4;
		/**
		 * < Hue<br>
		 * <i>native declaration : line 81</i>
		 */
		public static final int CC_HUE = 5;
		/**
		 * < Gamma correction<br>
		 * <i>native declaration : line 82</i>
		 */
		public static final int CC_GAMMA = 6;
		/**
		 * < Image sharpness<br>
		 * <i>native declaration : line 83</i>
		 */
		public static final int CC_SHARPNESS = 7;
		/**
		 * White balance color temperature<br>
		 * White balance color temperature<br>
		 * <i>native declaration : line 87</i>
		 */
		public static final int CC_WHITE_BALANCE_TEMPERATURE = 8;
		/**
		 * Enable/disable automatic while balance color temperature selection<br>
		 * Enable/disable automatic while balance color temperature selection<br>
		 * <i>native declaration : line 89</i>
		 */
		public static final int CC_AUTO_WHITE_BALANCE_TEMPERATURE = 9;
		/**
		 * White balance color component control (red, blue)<br>
		 * White balance color component control (red, blue)<br>
		 * <i>native declaration : line 91</i>
		 */
		public static final int CC_WHITE_BALANCE_COMPONENT = 10;
		/**
		 * Enable/disable automatic white balance color component selection<br>
		 * Enable/disable automatic white balance color component selection<br>
		 * <i>native declaration : line 93</i>
		 */
		public static final int CC_AUTO_WHITE_BALANCE_COMPONENT = 11;
		/**
		 * Backlight compensation mode<br>
		 * Backlight compensation mode<br>
		 * <i>native declaration : line 95</i>
		 */
		public static final int CC_BACKLIGHT_COMPENSATION = 12;
		/**
		 * Local power line frequency for anti-flicker processing<br>
		 * Local power line frequency for anti-flicker processing<br>
		 * <i>native declaration : line 97</i>
		 */
		public static final int CC_POWER_LINE_FREQUENCY = 13;
		/**
		 * Enable/disable automatic hue control<br>
		 * Enable/disable automatic hue control<br>
		 * <i>native declaration : line 99</i>
		 */
		public static final int CC_AUTO_HUE = 14;
		/**
		 * Mode for automatic exposure control<br>
		 * Mode for automatic exposure control<br>
		 * <i>native declaration : line 101</i>
		 */
		public static final int CC_AUTO_EXPOSURE_MODE = 15;
		/**
		 * Constraints for automatic exposure control (e.g. adaptive vs. constant frame rate)<br>
		 * Constraints for automatic exposure control (e.g. adaptive vs. constant frame rate)<br>
		 * <i>native declaration : line 103</i>
		 */
		public static final int CC_AUTO_EXPOSURE_PRIORITY = 16;
		/**
		 * Length of exposure (electronic shutter speed)<br>
		 * Length of exposure (electronic shutter speed)<br>
		 * <i>native declaration : line 105</i>
		 */
		public static final int CC_EXPOSURE_TIME_ABSOLUTE = 17;
		/**
		 * Relative change to the current length of exposure<br>
		 * Relative change to the current length of exposure<br>
		 * <i>native declaration : line 107</i>
		 */
		public static final int CC_EXPOSURE_TIME_RELATIVE = 18;
		/**
		 * Enable/disable automatic focus adjustment<br>
		 * Enable/disable automatic focus adjustment<br>
		 * <i>native declaration : line 111</i>
		 */
		public static final int CC_AUTO_FOCUS = 19;
		/**
		 * Distance to optimally focused target<br>
		 * Distance to optimally focused target<br>
		 * <i>native declaration : line 113</i>
		 */
		public static final int CC_FOCUS_ABSOLUTE = 20;
		/**
		 * Relative change in distance to currently focused target<br>
		 * Relative change in distance to currently focused target<br>
		 * <i>native declaration : line 115</i>
		 */
		public static final int CC_FOCUS_RELATIVE = 21;
		/**
		 * Aperture setting<br>
		 * Aperture setting<br>
		 * <i>native declaration : line 117</i>
		 */
		public static final int CC_IRIS_ABSOLUTE = 22;
		/**
		 * Relative change to the current aperture setting<br>
		 * Relative change to the current aperture setting<br>
		 * <i>native declaration : line 119</i>
		 */
		public static final int CC_IRIS_RELATIVE = 23;
		/**
		 * Objective lens focal length<br>
		 * Objective lens focal length<br>
		 * <i>native declaration : line 121</i>
		 */
		public static final int CC_ZOOM_ABSOLUTE = 24;
		/**
		 * Relative change to the current objective lens focal length<br>
		 * Relative change to the current objective lens focal length<br>
		 * <i>native declaration : line 123</i>
		 */
		public static final int CC_ZOOM_RELATIVE = 25;
		/**
		 * Digital zoom multiplier applied to the optical image<br>
		 * Digital zoom multiplier applied to the optical image<br>
		 * <i>native declaration : line 125</i>
		 */
		public static final int CC_DIGITAL_ZOOM = 26;
		/**
		 * Pan angle (rotation on a vertical axis)<br>
		 * Pan angle (rotation on a vertical axis)<br>
		 * <i>native declaration : line 129</i>
		 */
		public static final int CC_PAN_ABSOLUTE = 27;
		/**
		 * Relative change to the current pan angle<br>
		 * Relative change to the current pan angle<br>
		 * <i>native declaration : line 131</i>
		 */
		public static final int CC_PAN_RELATIVE = 28;
		/**
		 * Tilt angle (rotation in a vertical plane)<br>
		 * Tilt angle (rotation in a vertical plane)<br>
		 * <i>native declaration : line 133</i>
		 */
		public static final int CC_TILT_ABSOLUTE = 29;
		/**
		 * Relative change to the current tilt angle<br>
		 * Relative change to the current tilt angle<br>
		 * <i>native declaration : line 135</i>
		 */
		public static final int CC_TILT_RELATIVE = 30;
		/**
		 * Roll angle (rotation along the image viewing axis)<br>
		 * Roll angle (rotation along the image viewing axis)<br>
		 * <i>native declaration : line 137</i>
		 */
		public static final int CC_ROLL_ABSOLUTE = 31;
		/**
		 * Relative change to the current roll angle<br>
		 * Relative change to the current roll angle<br>
		 * <i>native declaration : line 139</i>
		 */
		public static final int CC_ROLL_RELATIVE = 32;
		/**
		 * Temporarily prevent image from being acquired<br>
		 * Temporarily prevent image from being acquired<br>
		 * <i>native declaration : line 143</i>
		 */
		public static final int CC_PRIVACY = 33;
		/**
		 * Base for unknown V4L2 controls<br>
		 * Base for unknown V4L2 controls<br>
		 * <i>native declaration : line 147</i>
		 */
		public static final int CC_V4L2_BASE = 4096;
		/**
		 * Base for custom V4L2 driver controls<br>
		 * Base for custom V4L2 driver controls<br>
		 * <i>native declaration : line 150</i>
		 */
		public static final int CC_V4L2_CUSTOM_BASE = 8192;
		/**
		 * Logitech (USB vendor ID: 0x046d)<br>
		 * Logitech (USB vendor ID: 0x046d)<br>
		 * <i>native declaration : line 153</i>
		 */
		public static final int CC_LOGITECH_BASE = 74252288;
		/**
		 * tilting such as the QuickCam Orbit series.<br>
		 * tilting such as the QuickCam Orbit series.<br>
		 * <i>native declaration : line 157</i>
		 */
		public static final int CC_LOGITECH_PANTILT_RELATIVE = 74252289;
		/**
		 * tilting such as the QuickCam Orbit series.<br>
		 * tilting such as the QuickCam Orbit series.<br>
		 * <i>native declaration : line 161</i>
		 */
		public static final int CC_LOGITECH_PANTILT_RESET = 74252290;
	};
	/// enum values
	public static interface CControlFlags {
		/**
		 * This flag is usually not set for action controls.<br>
		 * This flag is usually not set for action controls.<br>
		 * <i>native declaration : line 172</i>
		 */
		public static final int CC_CAN_READ = 1 << 0;
		/**
		 * values but cannot necessarily be queried.<br>
		 * values but cannot necessarily be queried.<br>
		 * <i>native declaration : line 176</i>
		 */
		public static final int CC_CAN_WRITE = 1 << 1;
		/**
		 * The control supports value change notification.<br>
		 * The control supports value change notification.<br>
		 * <i>native declaration : line 178</i>
		 */
		public static final int CC_CAN_NOTIFY = 1 << 2;
		/**
		 * The control is a custom vendor control and not standardized in V4L2 or UVC.<br>
		 * The control is a custom vendor control and not standardized in V4L2 or UVC.<br>
		 * <i>native declaration : line 181</i>
		 */
		public static final int CC_IS_CUSTOM = 1 << 8;
		/**
		 * Set values are interpreted as being relative to the current value.<br>
		 * Set values are interpreted as being relative to the current value.<br>
		 * <i>native declaration : line 183</i>
		 */
		public static final int CC_IS_RELATIVE = 1 << 9;
		/**
		 * The control triggers an action.<br>
		 * The control triggers an action.<br>
		 * <i>native declaration : line 185</i>
		 */
		public static final int CC_IS_ACTION = 1 << 10;
	};
	/// enum values
	public static interface CControlType {
		/**
		 * mapped to simple data types.<br>
		 * mapped to simple data types.<br>
		 * <i>native declaration : line 200</i>
		 */
		public static final int CC_TYPE_RAW = 1;
		/**
		 * Controls of this type are typically displayed as checkboxes.<br>
		 * Controls of this type are typically displayed as checkboxes.<br>
		 * <i>native declaration : line 203</i>
		 */
		public static final int CC_TYPE_BOOLEAN = 2;
		/**
		 * Controls of this type are typically displayed as combo boxes or lists.<br>
		 * Controls of this type are typically displayed as combo boxes or lists.<br>
		 * <i>native declaration : line 206</i>
		 */
		public static final int CC_TYPE_CHOICE = 3;
		/**
		 * The control accepts 8-bit integer values.<br>
		 * The control accepts 8-bit integer values.<br>
		 * <i>native declaration : line 208</i>
		 */
		public static final int CC_TYPE_BYTE = 4;
		/**
		 * The control accepts 16-bit integer values.<br>
		 * The control accepts 16-bit integer values.<br>
		 * <i>native declaration : line 210</i>
		 */
		public static final int CC_TYPE_WORD = 5;
		/**
		 * The control accepts 32-bit integer values.<br>
		 * The control accepts 32-bit integer values.<br>
		 * <i>native declaration : line 212</i>
		 */
		public static final int CC_TYPE_DWORD = 6;
	};
	/// enum values
	public static interface CEventId {
		/// <i>native declaration : line 221</i>
		public static final int CE_CONTROL_INVALID = 0;
	};
	/// enum values
	public static interface CEventFlags {
		/// <i>native declaration : line 230</i>
		public static final int CE_INVALID = 0;
	};
	/// enum values
	public static interface CFrameSizeTypes {
		/**
		 * One discrete width/height combination.<br>
		 * One discrete width/height combination.<br>
		 * <i>native declaration : line 240</i>
		 */
		public static final int CF_SIZE_DISCRETE = 1;
		/**
		 * Minimum and maximum values for both width and height.<br>
		 * Minimum and maximum values for both width and height.<br>
		 * <i>native declaration : line 242</i>
		 */
		public static final int CF_SIZE_CONTINUOUS = 2;
		/**
		 * Minimum, maximum, and step values for both width and height.<br>
		 * Minimum, maximum, and step values for both width and height.<br>
		 * <i>native declaration : line 244</i>
		 */
		public static final int CF_SIZE_STEPWISE = 3;
	};
	/// enum values
	public static interface CFrameIntervalTypes {
		/**
		 * One discrete time interval.<br>
		 * One discrete time interval.<br>
		 * <i>native declaration : line 254</i>
		 */
		public static final int CF_INTERVAL_DISCRETE = 1;
		/**
		 * Minimum and maximum values for the time interval.<br>
		 * Minimum and maximum values for the time interval.<br>
		 * <i>native declaration : line 256</i>
		 */
		public static final int CF_INTERVAL_CONTINUOUS = 2;
		/**
		 * Minimum, maximum, and step values for the time interval.<br>
		 * Minimum, maximum, and step values for the time interval.<br>
		 * <i>native declaration : line 258</i>
		 */
		public static final int CF_INTERVAL_STEPWISE = 3;
	};
	/// enum values
	public static interface CDynctrlFlags {
		/**
		 * Disable XML schema validation.<br>
		 * Disable XML schema validation.<br>
		 * <i>native declaration : line 268</i>
		 */
		public static final int CD_DONT_VALIDATE = 1 << 0;
		/**
		 * Collect errors and warnings during the process<br>
		 * Collect errors and warnings during the process<br>
		 * <i>native declaration : line 270</i>
		 */
		public static final int CD_REPORT_ERRORS = 1 << 1;
		/**
		 * Return meta data during the XML parsing process<br>
		 * Return meta data during the XML parsing process<br>
		 * <i>native declaration : line 272</i>
		 */
		public static final int CD_RETRIEVE_META_INFO = 1 << 2;
	};
	/// enum values
	public static interface CDynctrlMessageSeverity {
		/**
		 * < Error<br>
		 * <i>native declaration : line 281</i>
		 */
		public static final int CD_SEVERITY_ERROR = 2;
		/**
		 * < Warning<br>
		 * <i>native declaration : line 282</i>
		 */
		public static final int CD_SEVERITY_WARNING = 3;
		/**
		 * < Informational<br>
		 * <i>native declaration : line 283</i>
		 */
		public static final int CD_SEVERITY_INFO = 4;
	};
	/**
	 * Prototype for event handlers<br>
	 * <i>native declaration : line 657</i>
	 */
	public interface CEventHandler extends Callback {
		/// @param event_id @see CEventId
		void apply(int hDevice, int event_id, Pointer context);
	};
	/**
	 * Original signature : <code>CResult c_init()</code><br>
	 * <i>native declaration : line 669</i>
	 */
	public static native int c_init();
	/**
	 * Original signature : <code>void c_cleanup()</code><br>
	 * <i>native declaration : line 670</i>
	 */
	public static native void c_cleanup();
	/**
	 * Original signature : <code>CHandle c_open_device(const char*)</code><br>
	 * <i>native declaration : line 672</i><br>
	 * @deprecated use the safer methods {@link #c_open_device(java.lang.String)} and {@link #c_open_device(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int c_open_device(Pointer device_name);
	/**
	 * Original signature : <code>CHandle c_open_device(const char*)</code><br>
	 * <i>native declaration : line 672</i>
	 */
	public static native int c_open_device(String device_name);
	/**
	 * Original signature : <code>void c_close_device(CHandle)</code><br>
	 * <i>native declaration : line 673</i>
	 */
	public static native void c_close_device(int hDevice);
	/**
	 * Original signature : <code>CResult c_get_device_info(CHandle, const char*, CDevice*, unsigned int*)</code><br>
	 * <i>native declaration : line 674</i><br>
	 * @deprecated use the safer methods {@link #c_get_device_info(int, java.lang.String, com.eucalyptus.eucabot.webcam.CDevice, java.nio.IntBuffer)} and {@link #c_get_device_info(int, com.sun.jna.Pointer, com.eucalyptus.eucabot.webcam.CDevice, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int c_get_device_info(int hDevice, Pointer device_name, CDevice info, IntByReference size);
	/**
	 * Original signature : <code>CResult c_get_device_info(CHandle, const char*, CDevice*, unsigned int*)</code><br>
	 * <i>native declaration : line 674</i>
	 */
	public static native int c_get_device_info(int hDevice, String device_name, CDevice info, IntBuffer size);
	/**
	 * Original signature : <code>CResult c_enum_devices(CDevice*, unsigned int*, unsigned int*)</code><br>
	 * <i>native declaration : line 676</i><br>
	 * @deprecated use the safer methods {@link #c_enum_devices(com.eucalyptus.eucabot.webcam.CDevice, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #c_enum_devices(com.eucalyptus.eucabot.webcam.CDevice, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int c_enum_devices(CDevice devices, IntByReference size, IntByReference count);
	/**
	 * Original signature : <code>CResult c_enum_devices(CDevice*, unsigned int*, unsigned int*)</code><br>
	 * <i>native declaration : line 676</i>
	 */
	public static native int c_enum_devices(CDevice devices, IntBuffer size, IntBuffer count);
	/**
	 * Original signature : <code>CResult c_enum_pixel_formats(CHandle, CPixelFormat*, unsigned int*, unsigned int*)</code><br>
	 * <i>native declaration : line 678</i><br>
	 * @deprecated use the safer methods {@link #c_enum_pixel_formats(int, com.eucalyptus.eucabot.webcam.CPixelFormat, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #c_enum_pixel_formats(int, com.eucalyptus.eucabot.webcam.CPixelFormat, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int c_enum_pixel_formats(int hDevice, CPixelFormat formats, IntByReference size, IntByReference count);
	/**
	 * Original signature : <code>CResult c_enum_pixel_formats(CHandle, CPixelFormat*, unsigned int*, unsigned int*)</code><br>
	 * <i>native declaration : line 678</i>
	 */
	public static native int c_enum_pixel_formats(int hDevice, CPixelFormat formats, IntBuffer size, IntBuffer count);
	/**
	 * Original signature : <code>CResult c_enum_frame_sizes(CHandle, const CPixelFormat*, CFrameSize*, unsigned int*, unsigned int*)</code><br>
	 * <i>native declaration : line 679</i><br>
	 * @deprecated use the safer methods {@link #c_enum_frame_sizes(int, com.eucalyptus.eucabot.webcam.CPixelFormat, com.eucalyptus.eucabot.webcam.CFrameSize, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #c_enum_frame_sizes(int, com.eucalyptus.eucabot.webcam.CPixelFormat, com.eucalyptus.eucabot.webcam.CFrameSize, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int c_enum_frame_sizes(int hDevice, CPixelFormat pixelformat, CFrameSize sizes, IntByReference size, IntByReference count);
	/**
	 * Original signature : <code>CResult c_enum_frame_sizes(CHandle, const CPixelFormat*, CFrameSize*, unsigned int*, unsigned int*)</code><br>
	 * <i>native declaration : line 679</i>
	 */
	public static native int c_enum_frame_sizes(int hDevice, CPixelFormat pixelformat, CFrameSize sizes, IntBuffer size, IntBuffer count);
	/**
	 * Original signature : <code>CResult c_enum_frame_intervals(CHandle, const CPixelFormat*, const CFrameSize*, CFrameInterval*, unsigned int*, unsigned int*)</code><br>
	 * <i>native declaration : line 680</i><br>
	 * @deprecated use the safer methods {@link #c_enum_frame_intervals(int, com.eucalyptus.eucabot.webcam.CPixelFormat, com.eucalyptus.eucabot.webcam.CFrameSize, com.eucalyptus.eucabot.webcam.CFrameInterval, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #c_enum_frame_intervals(int, com.eucalyptus.eucabot.webcam.CPixelFormat, com.eucalyptus.eucabot.webcam.CFrameSize, com.eucalyptus.eucabot.webcam.CFrameInterval, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int c_enum_frame_intervals(int hDevice, CPixelFormat pixelformat, CFrameSize framesize, CFrameInterval intervals, IntByReference size, IntByReference count);
	/**
	 * Original signature : <code>CResult c_enum_frame_intervals(CHandle, const CPixelFormat*, const CFrameSize*, CFrameInterval*, unsigned int*, unsigned int*)</code><br>
	 * <i>native declaration : line 680</i>
	 */
	public static native int c_enum_frame_intervals(int hDevice, CPixelFormat pixelformat, CFrameSize framesize, CFrameInterval intervals, IntBuffer size, IntBuffer count);
	/**
	 * Original signature : <code>CResult c_enum_controls(CHandle, CControl*, unsigned int*, unsigned int*)</code><br>
	 * <i>native declaration : line 682</i><br>
	 * @deprecated use the safer methods {@link #c_enum_controls(int, com.eucalyptus.eucabot.webcam.CControl, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #c_enum_controls(int, com.eucalyptus.eucabot.webcam.CControl, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int c_enum_controls(int hDevice, CControl controls, IntByReference size, IntByReference count);
	/**
	 * Original signature : <code>CResult c_enum_controls(CHandle, CControl*, unsigned int*, unsigned int*)</code><br>
	 * <i>native declaration : line 682</i>
	 */
	public static native int c_enum_controls(int hDevice, CControl controls, IntBuffer size, IntBuffer count);
	/**
	 * Original signature : <code>CResult c_set_control(CHandle, CControlId, const CControlValue*)</code><br>
	 * <i>native declaration : line 683</i><br>
	 * @param control_id @see CControlId
	 */
	public static native int c_set_control(int hDevice, int control_id, CControlValue value);
	/**
	 * Original signature : <code>CResult c_get_control(CHandle, CControlId, CControlValue*)</code><br>
	 * <i>native declaration : line 684</i><br>
	 * @param control_id @see CControlId
	 */
	public static native int c_get_control(int hDevice, int control_id, CControlValue value);
	/**
	 * Original signature : <code>CResult c_enum_events(CHandle, CEvent*, unsigned int*, unsigned int*)</code><br>
	 * <i>native declaration : line 686</i><br>
	 * @deprecated use the safer methods {@link #c_enum_events(int, com.eucalyptus.eucabot.webcam.CEvent, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #c_enum_events(int, com.eucalyptus.eucabot.webcam.CEvent, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	public static native int c_enum_events(int hDevice, CEvent events, IntByReference size, IntByReference count);
	/**
	 * Original signature : <code>CResult c_enum_events(CHandle, CEvent*, unsigned int*, unsigned int*)</code><br>
	 * <i>native declaration : line 686</i>
	 */
	public static native int c_enum_events(int hDevice, CEvent events, IntBuffer size, IntBuffer count);
	/**
	 * Original signature : <code>CResult c_subscribe_event(CHandle, CEventId, CEventHandler, void*)</code><br>
	 * <i>native declaration : line 687</i><br>
	 * @param event_id @see CEventId
	 */
	public static native int c_subscribe_event(int hDevice, int event_id, WebcamLibrary.CEventHandler handler, Pointer context);
	/**
	 * Original signature : <code>CResult c_unsubscribe_event(CHandle, CEventId)</code><br>
	 * <i>native declaration : line 688</i><br>
	 * @param event_id @see CEventId
	 */
	public static native int c_unsubscribe_event(int hDevice, int event_id);
	/**
	 * Original signature : <code>CResult c_add_control_mappings_from_file(const char*, CDynctrlInfo*)</code><br>
	 * <i>native declaration : line 691</i><br>
	 * @deprecated use the safer methods {@link #c_add_control_mappings_from_file(java.lang.String, com.eucalyptus.eucabot.webcam.CDynctrlInfo)} and {@link #c_add_control_mappings_from_file(com.sun.jna.Pointer, com.eucalyptus.eucabot.webcam.CDynctrlInfo)} instead
	 */
	@Deprecated 
	public static native int c_add_control_mappings_from_file(Pointer file_name, CDynctrlInfo info);
	/**
	 * Original signature : <code>CResult c_add_control_mappings_from_file(const char*, CDynctrlInfo*)</code><br>
	 * <i>native declaration : line 691</i>
	 */
	public static native int c_add_control_mappings_from_file(String file_name, CDynctrlInfo info);
	/**
	 * Original signature : <code>char* c_get_error_text(CResult)</code><br>
	 * <i>native declaration : line 694</i>
	 */
	public static native Pointer c_get_error_text(int error);
	/**
	 * Original signature : <code>char* c_get_handle_error_text(CHandle, CResult)</code><br>
	 * <i>native declaration : line 695</i>
	 */
	public static native Pointer c_get_handle_error_text(int hDevice, int error);
}
