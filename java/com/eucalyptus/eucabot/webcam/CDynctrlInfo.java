package com.eucalyptus.eucabot.webcam;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CDynctrlInfo extends Structure {
	/**
	 * Flags controlling operations related to dynamic controls<br>
	 * @see CDynctrlFlags<br>
	 * C type : CDynctrlFlags
	 */
	public int flags;
	/**
	 * Processing statistics<br>
	 * C type : stats_struct
	 */
	public stats_struct stats;
	/**
	 * Meta information about the XML control configuration<br>
	 * C type : meta_struct
	 */
	public meta_struct meta;
	/// Number of messages in the @a messages array
	public int message_count;
	/**
	 * Pointer to the array with the messages concerning the operation<br>
	 * C type : CDynctrlMessage*
	 */
	public com.eucalyptus.eucabot.webcam.CDynctrlMessage.ByReference messages;
	/// <i>native declaration : line 609</i>
	public static class stats_struct extends Structure {
		/**
		 * Statistics on the constants that were processed<br>
		 * C type : CDynctrlInfoListStats
		 */
		public CDynctrlInfoListStats constants;
		/**
		 * Statistics on the controls that were processed<br>
		 * C type : CDynctrlInfoListStats
		 */
		public CDynctrlInfoListStats controls;
		/**
		 * Statistics on the mappings that were processed<br>
		 * C type : CDynctrlInfoListStats
		 */
		public CDynctrlInfoListStats mappings;
		public stats_struct() {
			super();
			initFieldOrder();
		}
		protected void initFieldOrder() {
			setFieldOrder(new java.lang.String[]{"constants", "controls", "mappings"});
		}
		/**
		 * @param constants Statistics on the constants that were processed<br>
		 * C type : CDynctrlInfoListStats<br>
		 * @param controls Statistics on the controls that were processed<br>
		 * C type : CDynctrlInfoListStats<br>
		 * @param mappings Statistics on the mappings that were processed<br>
		 * C type : CDynctrlInfoListStats
		 */
		public stats_struct(CDynctrlInfoListStats constants, CDynctrlInfoListStats controls, CDynctrlInfoListStats mappings) {
			super();
			this.constants = constants;
			this.controls = controls;
			this.mappings = mappings;
			initFieldOrder();
		}
		public static class ByReference extends stats_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends stats_struct implements Structure.ByValue {
			
		};
	};
	/// <i>native declaration : line 622</i>
	public static class meta_struct extends Structure {
		/**
		 * File format version<br>
		 * C type : CVersionNumber
		 */
		public CVersionNumber version;
		/**
		 * Name of the configuration author<br>
		 * C type : char*
		 */
		public Pointer author;
		/**
		 * Contact information of the configuration author (e.g. e-mail address)<br>
		 * C type : char*
		 */
		public Pointer contact;
		/**
		 * Copyright information about the configuration file<br>
		 * C type : char*
		 */
		public Pointer copyright;
		/**
		 * Revision number of the configuration file (configuration version)<br>
		 * C type : CVersionNumber
		 */
		public CVersionNumber revision;
		public meta_struct() {
			super();
			initFieldOrder();
		}
		protected void initFieldOrder() {
			setFieldOrder(new java.lang.String[]{"version", "author", "contact", "copyright", "revision"});
		}
		/**
		 * @param version File format version<br>
		 * C type : CVersionNumber<br>
		 * @param author Name of the configuration author<br>
		 * C type : char*<br>
		 * @param contact Contact information of the configuration author (e.g. e-mail address)<br>
		 * C type : char*<br>
		 * @param copyright Copyright information about the configuration file<br>
		 * C type : char*<br>
		 * @param revision Revision number of the configuration file (configuration version)<br>
		 * C type : CVersionNumber
		 */
		public meta_struct(CVersionNumber version, Pointer author, Pointer contact, Pointer copyright, CVersionNumber revision) {
			super();
			this.version = version;
			this.author = author;
			this.contact = contact;
			this.copyright = copyright;
			this.revision = revision;
			initFieldOrder();
		}
		public static class ByReference extends meta_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends meta_struct implements Structure.ByValue {
			
		};
	};
	public CDynctrlInfo() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"flags", "stats", "meta", "message_count", "messages"});
	}
	/**
	 * @param flags Flags controlling operations related to dynamic controls<br>
	 * @see CDynctrlFlags<br>
	 * C type : CDynctrlFlags<br>
	 * @param stats Processing statistics<br>
	 * C type : stats_struct<br>
	 * @param meta Meta information about the XML control configuration<br>
	 * C type : meta_struct<br>
	 * @param message_count Number of messages in the @a messages array<br>
	 * @param messages Pointer to the array with the messages concerning the operation<br>
	 * C type : CDynctrlMessage*
	 */
	public CDynctrlInfo(int flags, stats_struct stats, meta_struct meta, int message_count, com.eucalyptus.eucabot.webcam.CDynctrlMessage.ByReference messages) {
		super();
		this.flags = flags;
		this.stats = stats;
		this.meta = meta;
		this.message_count = message_count;
		this.messages = messages;
		initFieldOrder();
	}
	public static class ByReference extends CDynctrlInfo implements Structure.ByReference {
		
	};
	public static class ByValue extends CDynctrlInfo implements Structure.ByValue {
		
	};
}
